count(Region) %>%
mutate(Percentage = n / sum(n)) %>%
rename(Variable = Region) %>%
complete(Variable = AllBRLRegions, fill = list(n = 0, Percentage = 0)) %>%
mutate(Variable = factor(Variable, levels = variable_levels, ordered = TRUE)) %>%
mutate(Stats = "RegionAttendees")
# Gets percentage for Gender ~
fulldf_GenderMembersPerc <- subset(fulldfUltra, Data == "Members") %>%
filter(Region != "Error") %>%
count(Gender) %>%
mutate(Percentage = n / sum(n)) %>%
rename(Variable = Gender) %>%
mutate(Variable = factor(Variable, levels = variable_levels, ordered = TRUE)) %>%
mutate(Stats = "GenderMembers")
fulldf_InstitutionMembersPerc <- subset(fulldfUltra, Data == "Members") %>%
filter(Institution != "") %>%
count(Institution, Region) %>%
mutate(Percentage = n / sum(n)) %>%
rename(Variable = Institution) %>%
mutate(Stats = "InstitutionMembers") %>%
mutate(Variable = factor(Variable, levels = variable_levels, ordered = TRUE))
# Combine the data frames ~
fulldfPlots <- bind_rows(fulldf_StageMembersPerc,
fulldf_StateMembersPerc,
fulldf_RegionMembersPerc,
fulldf_GenderMembersPerc,
fulldf_InstitutionMembersPerc)
# Expands fulldfUp by creating BarFill ~
fulldfPlots$BarFill <- ifelse(str_detect(fulldfPlots$Stats, "Members"), "#006837",
ifelse(str_detect(fulldfPlots$Stats, "Attendees"), "#41ab5d", "#fbb4ae"))
# Reorders Population ~
fulldfPlots$Stats <- factor(fulldfPlots$Stats, ordered = T,
levels = c("StageMembers",
"StateMembers",
"RegionMembers",
"GenderMembers",
"InstitutionMembers"))
# Load geom data ~
BRL_Regions <- read_region(simplified = TRUE, year = 2020)
BRL_States <- read_state(code_state = "all", simplified = TRUE, year = 2020)
# Corrects entries ~
levels(BRL_Regions$name_region <- gsub("Centro Oeste", "Centro-Oeste", BRL_Regions$name_region))
levels(BRL_States$name_region <- gsub("Centro Oeste", "Centro-Oeste", BRL_States$name_region))
# Expands BRL_Regions by creating Region ~
BRL_Regions$Region <- ifelse(BRL_Regions$name_region %in% c("Norte"), "North",
ifelse(BRL_Regions$name_region %in% c("Nordeste"), "Northeast",
ifelse(BRL_Regions$name_region %in% c("Centro-Oeste"), "Central-West",
ifelse(BRL_Regions$name_region %in% c("Sudeste"), "Southeast",
ifelse(BRL_Regions$name_region %in% c("Sul"), "South", "Error")))))
# Expands BRL_Regions by adding the SBBE24 & Abroad rows ~
BRL_Regions <- add_row(BRL_Regions, name_region = "SBBE24", Region = "SBBE24")
BRL_Regions <- add_row(BRL_Regions, name_region = "Exterior", Region = "Exterior")
BRL_States <- add_row(BRL_States, abbrev_state = "Exterior", name_region = "Exterior")
# Creates a data frame with the centroids of the Brazilian regions ~
BRL_Regions_Centroids_df <- data.frame(Region = c("North", "Northeast", "Central-West", "Southeast", "South", "SBBE24", "Exterior", "SP"),
Longitude = c(-58, -41.25, -53.15, -44.85, -51.2, -49.271111, -65, -48.62),
Latitude = c(-3.5, -8, -15.5, -20, -27.5, -25.429722, -25, -21.9))
# Merges data frame to perform the change ~
BRL_Regions <- left_join(BRL_Regions, BRL_Regions_Centroids_df, by = "Region")
# Reduces data ~
BRL_Regions <- BRL_Regions %>%
dplyr::select(-code_region)
BRL_States <- BRL_States %>%
dplyr::select(-c(code_state, code_region, name_state))
# Renames columns ~
BRL_States <- BRL_States %>%
rename(Variable = abbrev_state)
# Joins data frames ~
fulldf_RegionMembersPerc <- fulldf_RegionMembersPerc %>%
rename(name_region = Variable)
fulldf_RegionAttendeesPerc <- fulldf_RegionAttendeesPerc %>%
rename(name_region = Variable)
# Merges data frames individually ~
RegionMembers_df <- BRL_States %>%
inner_join(fulldf_RegionMembersPerc, by = "name_region") %>%
mutate(Stats = "Members")  %>%
mutate(Division = "Per Region")
StateMembers_df <- BRL_States %>%
inner_join(fulldf_StateMembersPerc, by = "Variable") %>%
mutate(Stats = "Members") %>%
mutate(Division = "Per State")
RegionAttendees_df <- BRL_States %>%
inner_join(fulldf_RegionAttendeesPerc, by = "name_region") %>%
mutate(Stats = "Attendees")  %>%
mutate(Division = "Per Region")
StateAttendees_df <- BRL_States %>%
inner_join(fulldf_StateAttendeesPerc, by = "Variable") %>%
mutate(Stats = "Attendees") %>%
mutate(Division = "Per State")
# Combines data frames ~
combined_sfs <- bind_rows(StateAttendees_df, StateMembers_df, RegionAttendees_df, RegionMembers_df)
# Expands combined_sfs by adding the SBBE24 row ~
combined_sfs <- add_row(combined_sfs, name_region = "SBBE24", Division = "Per Region", Stats = "Members")
# Converts to data frames ~
combined_dfs <- as.data.frame(combined_sfs)
BRL_Regions_df <- as.data.frame(BRL_Regions)
# Merges data frame to perform the change ~
merged_dfs <- left_join(combined_dfs, BRL_Regions_df, by = "name_region", suffix = c("", ".BRL"))
# Performs the change ~
resulting_dfs <- merged_dfs %>%
mutate(geom = ifelse(Division == "Per Region", geom.BRL, geom))
# Eliminates unnecessary column ~
resulting_dfs <- resulting_dfs %>%
dplyr::select(-c(n, geom.BRL))
# Converts data frame back to sf ~
fulldf_map <- st_as_sf(resulting_dfs, crs = st_crs(combined_sfs))
# Renames columns ~
BRL_Regions_Centroids_df <- BRL_Regions_Centroids_df %>%
rename(Variable = Region)
# Converts to data frames ~
combined_dfs <- as.data.frame(combined_sfs)
BRL_Regions_df <- as.data.frame(BRL_Regions)
# Merges data frame to perform the change ~
fulldf_map <- left_join(fulldf_map, BRL_Regions_Centroids_df, by = "Variable", suffix = c("", ".SP"))
# Reorders Population ~
fulldf_map$Stats <- factor(fulldf_map$Stats, ordered = TRUE,
levels = c("Members",
"Attendees"))
# Reorders Division ~
fulldf_map$Division <- factor(fulldf_map$Division, ordered = T,
levels = c("Per Region",
"Per State"))
# Creates the Circular data frame ~
Circular <- subset(fulldfPlots, Stats == "InstitutionMembers") %>% arrange(desc(Percentage))
# Reorders Population ~
Circular$Region <- factor(Circular$Region, ordered = TRUE,
levels = c("Norte",
"Nordeste",
"Centro-Oeste",
"Sudeste",
"Sul",
"Exterior"))
# Set a number of 'empty bar' to add at the end of each group
empty_bar <- 2
to_add <- data.frame(matrix(NA, empty_bar * nlevels(Circular$Region), ncol(Circular)))
colnames(to_add) <- colnames(Circular)
to_add$Region <- rep(levels(Circular$Region), each = empty_bar)
Circular <- rbind(Circular, to_add)
Circular <- Circular %>% arrange(Region)
Circular$ID <- seq(1, nrow(Circular))
# Get the name and the y position of each label
label_data_Circular <- Circular
number_of_bar <- nrow(label_data_Circular)
angle <- 90 - 360 * (label_data_Circular$ID - .5) / number_of_bar
label_data_Circular$hjust <- ifelse(angle < -90, 1, 0)
label_data_Circular$angle <- ifelse(angle < -90, angle + 180, angle)
# Prepares a data frame for base lines ~
base_data_Circular <- Circular %>%
group_by(Region) %>%
summarize(start = min(ID),
end = max(ID) - empty_bar,
N = n(), .groups = "drop") %>%
mutate(end = ifelse(N == 1, start + 1, end)) %>%
mutate(title = (start + end) / 2)
# Prepares a data frame for grid ~
grid_data_Circular <- base_data_Circular
grid_data_Circular$end <- grid_data_Circular$end[ c( nrow(grid_data_Circular), 1:nrow(grid_data_Circular) -1)] + 1
grid_data_Circular$start <- grid_data_Circular$start - 1
grid_data_Circular <- grid_data_Circular[-1, ]
# Reorders Population ~
fulldf_map$name_region <- factor(fulldf_map$name_region, ordered = TRUE,
levels = c("Norte",
"Nordeste",
"Centro-Oeste",
"Sudeste",
"Sul",
"Exterior"))
# Adds English & bilingual labels  ~
fulldf_map <- fulldf_map %>%
mutate(name_region_EN = case_when(name_region == "Norte" ~ "North",
name_region == "Nordeste" ~ "Northeast",
name_region == "Centro-Oeste" ~ "Central-West",
name_region == "Sudeste" ~ "Southest",
name_region == "Sul" ~ "South",
name_region == "Exterior" ~ "Abroad", TRUE ~ name_region),
name_region_Bilingual = paste0("<span style='font-size:78pt; color:#000000;'>", name_region,
"<span style='font-size:78pt; color:#ffffff;'><br>", name_region_EN, "</span>"))
# Creates MiniMap ~
MiniMap_Bilingual <- ggplot() +
geom_sf(data = subset(fulldf_map, name_region != "SBBE24"),
aes(fill = name_region),
colour = "#f7fbff") +
geom_star(data = subset(fulldf_map, Division == "Per Region" & Region == "Exterior"),
aes(x = Longitude, y = Latitude, fill = name_region),
size = 30, starshape = 8, starstroke = .3, colour = "#f7fbff") +
scale_fill_manual(values = c("#1b9e77", "#fdb462", "#fb8072", "#bebada", "#80b1d3", "#c994c7")) +
ggtext::geom_richtext(data = subset(fulldf_map, Division == "Per Region" & Stats == "Members" & Region != "SBBE24"),
aes(x = Longitude, y = Latitude, label = name_region_Bilingual),
family = "Cormorant", fontface = "bold", size = 8, colour = "#000000", fill = NA, label.color = NA, lineheight = .55) +
coord_sf(xlim = c(-75.75, -33), ylim = c(-35, 6.5), expand = FALSE) +
theme_void() +
theme(legend.position = "none",
panel.background = element_rect(fill = "transparent", color = NA),
plot.background = element_rect(fill = "transparent", color = NA))
# Creates Institutions bilingual plot ~
Institutions_Plot <- ggplot(Circular, aes(x = as.factor(ID), y = Percentage * 100, fill = Region)) +
geom_bar(stat = "identity", alpha = 1) +
scale_fill_manual(values = c("#1b9e77", "#fdb462", "#fb8072", "#bebada", "#80b1d3", "#c994c7")) +
geom_segment(data = grid_data_Circular, aes(x = end, y = 5, xend = start, yend = 5),
colour = "#000000", alpha = 1, linewidth = .25, linetype = 4, inherit.aes = FALSE) +
geom_segment(data = grid_data_Circular, aes(x = end, y = 10, xend = start, yend = 10),
colour = "#000000", alpha = 1, linewidth = .25, linetype = 4, inherit.aes = FALSE) +
geom_segment(data = grid_data_Circular, aes(x = end, y = 15, xend = start, yend = 15),
colour = "#000000", alpha = 1, linewidth = .25, linetype = 4, inherit.aes = FALSE) +
annotate("text", x = rep(max(Circular$ID), 3), y = c(5, 10, 15),
label = c("5%", "10%", "15%"), family = "Cormorant", size = 26, fontface = "bold",
color = "#000000", hjust = 1) +
geom_bar(stat = "identity", alpha = .5) +
ylim(-100, 80) +
labs(title = "Instituições Representadas na SBBE",
subtitle = "Institutions Represented in SBBE") +
theme(panel.background = element_rect(fill = "#ffffff"),
panel.grid = element_blank(),
panel.border = element_blank(),
legend.position = "none",
plot.title = element_text(family = "Cormorant", size = 250, face = "bold", hjust = .5, margin = margin(t = 30)),
plot.subtitle = element_text(family = "Cormorant", size = 250, colour = "#555555", face = "bold", hjust = .5, margin = margin(t = 20)),
axis.text = element_blank(),
axis.title = element_blank(),
axis.ticks = element_blank()) +
coord_polar() +
geom_text(data = label_data_Circular, aes(x = ID, y = Percentage * 100 + 6,
label = Variable, hjust = hjust), family = "Cormorant", size = 30,
color = "#000000", fontface = "bold", angle = label_data_Circular$angle, inherit.aes = FALSE) +
geom_segment(data = base_data_Circular, aes(x = start, y = -5, xend = end, yend = -5),
colour = "#000000", alpha = 1, size = .6, inherit.aes = FALSE)
# Merges Institutions bilingual plot with MiniMap ~
Institutions_PlotUp <- Institutions_Plot +
inset_element(MiniMap_Bilingual, left = .329, bottom = .2725, right = .329 + .35, top = .2725 + .35, align_to = "full") +
plot_layout(guides = "collect")
# Saves Institutions bilingual plot ~
ggsave("./SBBEPlots/SBBEMembersInstitutions.png", Institutions_PlotUp, limitsize = FALSE,
device = "png", scale = 1, width = 14, height = 15, dpi = 600)
# Gets Gender data frame ~
Gender <- fulldfPlots %>%
filter(Stats %in% c("GenderMembers", "StageMembers")) %>%
droplevels() %>%
arrange(desc(Percentage))
# Adds English & bilingual labels  ~
Gender <- Gender %>%
mutate(
Variable_EN = case_when(
Variable == "Masculino" ~ "Male",
Variable == "Feminino" ~ "Female",
Variable == "Outro" ~ "Other",
Variable == "Profissional" ~ "Professional",
Variable == "Pós-graduação" ~ "Postgrad",
Variable == "Graduação" ~ "Undergrad", TRUE ~ Variable),
Variable_Bilingual_1 = paste0("<span style='font-size:62pt; color:#000000;'>", Variable,
"<span style='font-size:62pt; color:#555555;'><br>", Variable_EN, "</span>"))
# Adds empty bars for spacing in circular plot ~
empty_bar <- 6
to_add <- data.frame(matrix(NA, empty_bar * nlevels(Gender$Stats), ncol(Gender)))
colnames(to_add) <- colnames(Gender)
to_add$Stats <- rep(levels(Gender$Stats), each = empty_bar)
Gender <- rbind(Gender, to_add)
Gender <- Gender %>% arrange(Stats)
Gender$ID <- seq(1, nrow(Gender))
# Computes base and grid data for plot ~
base_data_Gender <- Gender %>%
group_by(Stats) %>%
summarize(start = min(ID),
end = max(ID) - empty_bar,
N = n(), .groups = "drop") %>%
mutate(end = ifelse(N == 1, start + 1, end)) %>%
mutate(title = (start + end) / 2)
grid_data_Gender <- base_data_Gender
grid_data_Gender$end <- grid_data_Gender$end[ c(nrow(grid_data_Gender), 1:(nrow(grid_data_Gender) - 1)) ] + 1
grid_data_Gender$start <- grid_data_Gender$start - 1
grid_data_Gender <- grid_data_Gender[-1, ]
# Computes number of bars ~
number_of_bars <- nrow(Gender)
label_data <- Gender %>%
filter(Percentage > 0) %>%
mutate(angle = 90 - 360 * (ID - 0.5) / nrow(Gender),
hjust = ifelse(angle < -90, 1, 0),
angle = ifelse(angle < -90, angle + 180, angle),
label_y = ifelse(Percentage * 100 > 30, Percentage * 100 + 8, Percentage * 100 + 5))
# Creates Gender plot ~
Gender_Plot <-
ggplot(Gender, aes(x = as.factor(ID), y = Percentage * 100, fill = Stats)) +
geom_bar(stat = "identity", alpha = 1) +
geom_bar(aes(x = as.factor(ID), y = Percentage * 100, fill = Region),
stat = "identity", alpha = 0.5) +
geom_segment(data = grid_data_Gender, aes(x = end, y = 10, xend = start, yend = 10),
colour = "#000000", linewidth = 0.25, linetype = 4, inherit.aes = FALSE) +
geom_segment(data = grid_data_Gender, aes(x = end, y = 20, xend = start, yend = 20),
colour = "#000000", linewidth = 0.25, linetype = 4, inherit.aes = FALSE) +
geom_segment(data = grid_data_Gender, aes(x = end, y = 30, xend = start, yend = 30),
colour = "#000000", linewidth = 0.25, linetype = 4, inherit.aes = FALSE) +
geom_segment(data = grid_data_Gender, aes(x = end, y = 40, xend = start, yend = 40),
colour = "#000000", linewidth = 0.25, linetype = 4, inherit.aes = FALSE) +
geom_segment(data = grid_data_Gender, aes(x = end, y = 50, xend = start, yend = 50),
colour = "#000000", linewidth = 0.25, linetype = 4, inherit.aes = FALSE) +
geom_segment(data = base_data_Gender,
aes(x = start, y = -5, xend = end, yend = -5),
colour = "#000000", size = .6, inherit.aes = FALSE) +
annotate("text", x = rep(max(Gender$ID), 5), y = c(10, 20, 30, 40, 50),
label = c("10%", "20%", "30%", "40%", "50%"),
family = "Cormorant", size = 20, fontface = "bold", color = "#000000", hjust = 1) +
ggtext::geom_richtext(data = label_data,
aes(x = ID, y = label_y, label = Variable_Bilingual_1,
angle = angle, hjust = hjust),
fill = NA, label.color = NA,
family = "Cormorant",
size = 6,
fontface = "bold",
color = "#000000",
lineheight = .75,
inherit.aes = FALSE) +
scale_fill_manual(values = c("#e5d8bd", "#fdbf6f"), na.translate = FALSE) +
labs(title = "Membros da SBBE por Estágio Acadêmico & Gênero",
subtitle = "SBBE Members by Academic Stage & Gender") +
ylim(-90, 70) +
coord_polar() +
theme(panel.background = element_rect(fill = "#ffffff"),
panel.grid = element_blank(),
panel.border = element_blank(),
legend.position = "none",
plot.title = element_text(family = "Cormorant", size = 100, face = "bold", hjust = .5, margin = margin(t = 10)),
plot.subtitle = element_text(family = "Cormorant", size = 100, colour = "#555555", face = "bold", hjust = .5, margin = margin(t = 8.5)),
axis.text = element_blank(),
axis.title = element_blank(),
axis.ticks = element_blank())
# Saves Gender plot ~
ggsave("./SBBEPlots/SBBEMembersStats.png", Gender_Plot, limitsize = FALSE,
device = "png", scale = 1, width = 8, height = 7, dpi = 600)
# Adds English & bilingual labels  ~
fulldf_map <- fulldf_map %>%
mutate(name_region_Bilingual_2 = paste0("<span style='font-size:56pt; color:#000000;'>", name_region,
"<span style='font-size:56pt; color:#ffffff;'><br>", name_region_EN, "</span>"))
fulldf_map <- fulldf_map %>%
mutate(Division_Bilingual = case_when(Division == "Per State" ~ "<span style='font-size:86pt;'>Por Estado</span><br><span style='font-size:86pt; color:#000000;'>Per State</span>",
Division == "Per Region" ~ "<span style='font-size:86pt;'>Por Região</span><br><span style='font-size:86pt; color:#000000;'>Per Region</span>", TRUE ~ Division))
# Creates Members Map ~
Map_Members <-
ggplot() +
geom_sf(data = subset(fulldf_map, Stats == "Members"), aes(fill = Percentage * 100), colour = "#f7fbff") +
coord_sf(xlim = c(-75.75, -33), ylim = c(-35, 6.5), expand = FALSE) +
scale_y_continuous(breaks = c(0, -10, -20, -30)) +
geom_star(data = subset(fulldf_map, Division == "Per Region" & Stats == "Members" & Region == "SBBE24"),
aes(x = Longitude, y = Latitude), size = 2.8, starshape = 15, starstroke = .3,
fill = "#FF7B00", colour = "#000000") +
geom_star(data = subset(fulldf_map, Division == "Per Region" & Stats == "Members" & Region == "Exterior"),
aes(x = Longitude, y = Latitude, fill = Percentage), size = 25, starshape = 8,
starstroke = .3, colour = "#f7fbff") +
geom_text(data = subset(fulldf_map, Division == "Per Region" & Stats == "Members" & Region == "SBBE24"),
aes(x = Longitude, y = Latitude, label = Region),
nudge_x = 3.6, nudge_y = -1,
size = 24, family = "Cormorant", fontface = "bold", colour = "#FF7B00") +
labs(title = "% de Membros da SBBE por Região & Estado",
subtitle = "% of SBBE Members per Region & State") +
scale_fill_continuous(low = "#d6d6d6", high = "#004529",
breaks = c(10, 20, 30, 40, 50),
labels = c("10%", "20%", "30%", "40%", "50%"),
limits = c(0, 60)) +
ggtext::geom_richtext(data = subset(fulldf_map, Division == "Per Region" & Stats == "Members" & Region != "SBBE24"),
aes(x = Longitude, y = Latitude, label = name_region_Bilingual_2),
family = "Cormorant", fontface = "bold", size = 8, colour = "#000000", fill = NA, label.color = NA, lineheight = .4) +
facet_grid(. ~ Division, labeller = labeller(Division = ~ unique(fulldf_map$Division_Bilingual[match(.x, fulldf_map$Division)]))) +
annotation_scale(data = subset(fulldf_map, Division == "Per Region" & Stats == "Members"),
text_family = "Cormorant", location = "bl", line_width = 1,
text_cex = 6, style = "ticks",
pad_x = unit(.1, "in"), pad_y = unit(.1, "in")) +
annotation_north_arrow(data = subset(fulldf_map, Division == "Per Region" & Stats == "Members"),
location = "bl", which_north = "true", style = north_arrow_fancy_orienteering,
pad_x = unit(.1, "in"), pad_y = unit(.175, "in")) +
theme(legend.position = "right",
legend.margin = margin(t = 0, b = 0, r = 0, l = 15),
legend.box.margin = margin(t = 0, b = 0, r = 0, l = 0),
panel.background = element_rect(fill = "#ffffff"),
panel.border = element_rect(colour = "#000000", linewidth = .25, fill = NA),
panel.grid = element_blank(),
plot.margin = margin(t = 0, b = 0, r = 0, l = 0, unit = "cm"),
plot.title = element_text(family = "Cormorant", size = 100, face = "bold", hjust = .5, margin = margin(t = 0)),
plot.subtitle = element_text(family = "Cormorant", size = 100, colour = "#555555", face = "bold", hjust = .5, margin = margin(t = 5, b = 10)),
axis.text = element_blank(),
axis.title = element_blank(),
axis.ticks = element_blank(),
strip.text = element_markdown(family = "Cormorant", size = 86, face = "bold", lineheight = .21),
strip.background = element_rect(colour = "#000000", fill = "#d6d6d6", linewidth = .25)) +
guides(fill = guide_colourbar(title = "", label.theme = element_text(family = "Cormorant", size = 75, face = "bold"),
barwidth = 1, barheight = 8, order = 1, frame.linetype = 1,
frame.colour = "#000000", ticks.colour = "#f7fbff",
direction = "vertical", reverse = FALSE, even.steps = TRUE,
draw.ulim = TRUE, draw.llim = TRUE))
# Saves Members Map ~
ggsave("./SBBEPlots/SBBEMembersMap.png", Map_Members, limitsize = FALSE,
device = "png", scale = 1, width = 9, height = 5.5, dpi = 600)
# Creates Attendees Map ~
Map_Attendees <-
ggplot() +
geom_sf(data = subset(fulldf_map, Stats == "Attendees"), aes(fill = Percentage * 100), colour = "#f7fbff") +
coord_sf(xlim = c(-75.75, -33), ylim = c(-35, 6.5), expand = FALSE) +
scale_y_continuous(breaks = c(0, -10, -20, -30)) +
geom_star(data = subset(fulldf_map, Division == "Per Region" & Stats == "Members" & Region == "SBBE24"),
aes(x = Longitude, y = Latitude), size = 2.8, starshape = 15, starstroke = .3,
fill = "#FF7B00", colour = "#000000") +
geom_star(data = subset(fulldf_map, Division == "Per Region" & Stats == "Members" & Region == "Exterior"),
aes(x = Longitude, y = Latitude, fill = Percentage), size = 25, starshape = 8,
starstroke = .3, colour = "#f7fbff") +
geom_text(data = subset(fulldf_map, Division == "Per Region" & Stats == "Members" & Region == "SBBE24"),
aes(x = Longitude, y = Latitude, label = Region),
nudge_x = 3.6, nudge_y = -1,
size = 24, family = "Cormorant", fontface = "bold", colour = "#FF7B00") +
labs(title = "% de Participantes do SBBE24 por Região & Estado",
subtitle = "% of SBBE24 Attendees per Region & State") +
scale_fill_continuous(low = "#d6d6d6", high = "#004529",
breaks = c(10, 20, 30, 40, 50),
labels = c("10%", "20%", "30%", "40%", "50%"),
limits = c(0, 60)) +
ggtext::geom_richtext(data = subset(fulldf_map, Division == "Per Region" & Stats == "Members" & Region != "SBBE24"),
aes(x = Longitude, y = Latitude, label = name_region_Bilingual_2),
family = "Cormorant", fontface = "bold", size = 8, colour = "#000000", fill = NA, label.color = NA, lineheight = .4) +
facet_grid(. ~ Division, labeller = labeller(Division = ~ unique(fulldf_map$Division_Bilingual[match(.x, fulldf_map$Division)]))) +
annotation_scale(data = subset(fulldf_map, Division == "Per Region" & Stats == "Members"),
text_family = "Cormorant", location = "bl", line_width = 1,
text_cex = 6, style = "ticks",
pad_x = unit(.1, "in"), pad_y = unit(.1, "in")) +
annotation_north_arrow(data = subset(fulldf_map, Division == "Per Region" & Stats == "Members"),
location = "bl", which_north = "true", style = north_arrow_fancy_orienteering,
pad_x = unit(.1, "in"), pad_y = unit(.175, "in")) +
theme(legend.position = "right",
legend.margin = margin(t = 0, b = 0, r = 0, l = 20),
legend.box.margin = margin(t = 0, b = 0, r = 0, l = 0),
panel.background = element_rect(fill = "#ffffff"),
panel.border = element_rect(colour = "#000000", linewidth = .25, fill = NA),
panel.grid = element_blank(),
plot.margin = margin(t = 0, b = 0, r = 0, l = 0, unit = "cm"),
plot.title = element_text(family = "Cormorant", size = 100, face = "bold", hjust = .5, margin = margin(t = 0)),
plot.subtitle = element_text(family = "Cormorant", size = 100, colour = "#555555", face = "bold", hjust = .5, margin = margin(t = 5, b = 10)),
axis.text = element_blank(),
axis.title = element_blank(),
axis.ticks = element_blank(),
strip.text = element_markdown(family = "Cormorant", size = 86, face = "bold", lineheight = .21),
strip.background = element_rect(colour = "#000000", fill = "#d6d6d6", linewidth = .25)) +
guides(fill = guide_colourbar(title = "", label.theme = element_text(family = "Cormorant", size = 75, face = "bold"),
barwidth = 1, barheight = 8, order = 1, frame.linetype = 1,
frame.colour = "#000000", ticks.colour = "#f7fbff",
direction = "vertical", reverse = FALSE, even.steps = TRUE,
draw.ulim = TRUE, draw.llim = TRUE))
# Saves Members Map ~
ggsave("./SBBEPlots/SBBEAttendeesMap.png",Map_Attendees, limitsize = FALSE,
device = "png", scale = 1, width = 9, height = 5.5, dpi = 600)
# Sets custom x-axis labels ~
xlabel_PT <- c("Per Region" = "Por Região",
"Per State" = "Por Estado")
ylabel_PT <- c("Members" = "% de Afiliados à SBBE",
"Attendees" = "% de Participantes no SBBE24")
xlabel_EN <- c("Members" = "% of SBBE Members",
"Attendees" = "% of SBBE24 Attendees")
ylabel_EN <- c("Members" = "% of SBBE Members",
"Attendees" = "% of SBBE24 Attendees")
# Function to build and save Article Map plots ~
make_map_plot <- function(filename, x_labels, y_labels, region_label_column, filter_abroad_only = TRUE) {
label_data_abroad <- fulldf_map %>%
dplyr::filter(Division == "Per Region", Stats == "Members" & Region != "SBBE24" ) %>%
{ if (filter_abroad_only) dplyr::filter(., Region == "Exterior") else . }
Map <- ggplot() +
geom_sf(data = fulldf_map, aes(fill = Percentage * 100), colour = "#f7fbff") +
coord_sf(xlim = c(-75.75, -33), ylim = c(-35, 6.5), expand = FALSE) +
scale_y_continuous(breaks = c(0, -10, -20, -30)) +
geom_star(data = subset(fulldf_map, Division == "Per Region" & Stats == "Members" & Region == "SBBE24"),
aes(x = Longitude, y = Latitude), size = 2.8, starshape = 15, starstroke = .3,
fill = "#FF7B00", colour = "#000000") +
geom_star(data = subset(fulldf_map, Division == "Per Region" & Stats == "Members" & Region == "Exterior"),
aes(x = Longitude, y = Latitude, fill = Percentage), size = 25, starshape = 8,
starstroke = .3, colour = "#f7fbff") +
geom_label(data = label_data_abroad,
aes(x = Longitude, y = Latitude, label = .data[[region_label_column]]),
size = 4.25, family = "Cormorant", colour = "#000000") +
geom_text(data = subset(fulldf_map, Division == "Per Region" & Stats == "Members" & Region == "SBBE24"),
aes(x = Longitude, y = Latitude, label = Region),
nudge_x = 3.6, nudge_y = -1,
size = 4.25, family = "Cormorant", fontface = "bold", colour = "#FF7B00") +
scale_fill_continuous(low = "#d6d6d6", high = "#004529",
breaks = c(10, 20, 30, 40, 50),
labels = c("10%", "20%", "30%", "40%", "50%"),
limits = c(0, 60)) +
facet_grid(Division ~ Stats, labeller = labeller(Division = x_labels, Stats = y_labels)) +
annotation_scale(data = subset(fulldf_map, Division == "Per Region" & Stats == "Members"),
text_family = "Cormorant", location = "bl", line_width = 1.25,
text_cex = 1, style = "ticks",
pad_x = unit(.2, "in"), pad_y = unit(.2, "in")) +
annotation_north_arrow(data = subset(fulldf_map, Division == "Per Region" & Stats == "Members"),
location = "bl", which_north = "true", style = north_arrow_fancy_orienteering,
pad_x = unit(.2, "in"), pad_y = unit(.3, "in")) +
theme(legend.position = "right",
legend.margin = margin(t = 0, b = 0, r = 0, l = 20),
legend.box.margin = margin(t = 0, b = 0, r = 0, l = 0),
panel.background = element_rect(fill = "#ffffff"),
panel.border = element_rect(colour = "#000000", linewidth = .25, fill = NA),
panel.grid = element_blank(),
plot.margin = margin(t = 0, b = 0, r = 0, l = 0, unit = "cm"),
axis.title = element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank(),
strip.text = element_text(family = "Cormorant", colour = "#000000", size = 21, face = "bold"),
strip.background = element_rect(colour = "#000000", fill = "#d6d6d6", linewidth = .25)) +
guides(fill = guide_colourbar(title = "", label.theme = element_text(family = "Cormorant", size = 18, face = "bold"),
barwidth = 1.25, barheight = 14, order = 1, frame.linetype = 1,
frame.colour = "#000000", ticks.colour = "#f7fbff",
direction = "vertical", reverse = FALSE, even.steps = TRUE,
draw.ulim = TRUE, draw.llim = TRUE))
ggsave(Map, file = filename, limitsize = FALSE,
device = "pdf", scale = 1, width = 12, height = 11, dpi = 600)}
# Runs function to get both Article Map plots ~
make_map_plot("./SBBEPlots/SBBEArticleMap_EN.pdf", x_labels = xlabel_EN, y_labels = ylabel_EN, region_label_column = "name_region_EN", filter_abroad_only = FALSE)
make_map_plot("./SBBEPlots/SBBEArticleMap_PT.pdf", x_labels = xlabel_PT, y_labels = ylabel_PT, region_label_column = "name_region", filter_abroad_only = TRUE)
#
##
### The END ~~~~~
