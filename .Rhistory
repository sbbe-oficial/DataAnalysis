"Universidade Estadual de Maringá",
"Centro Universitário Claretiano",
"Uningá",
"Instituto Carlos Chagas — Fiocruz Paraná",
"Universidade Estadual de Ponta Grossa",
"Universidade Estadual do Centro-Oeste do Paraná",
"Secretaria de Educação do Estado do Paraná",
"Instituto Federal de Educação, Ciência E Tecnologia do Paraná",
"Universidade Tecnológica Federal do Paraná",
"Pontifícia Universidade Católica do Paraná",
"Universidade Federal do Paraná",
"Hospital Regional Hans Dieter Schmidt",
"Centro Universitário Leonardo da Vinci",
"Universidade da Região de Joinville",
"Universidade Federal de Santa Catarina",
"Universidade do Vale do Paraíba",
"Instituto Butantan",
"Universidade do Vale do Itajaí",
"Universidade Santo Amaro",
"Universidade do Oeste Paulista",
"Universidade Federal de São Carlos",
"Universidade Federal do ABC",
"Universidade Federal de São Paulo",
"Universidade de São Paulo",
"Universidade Estadual de Campinas",
"Universidade Estadual Paulista",
"Unisãojosé",
"Universidade Estadual do Norte Fluminense Darcy Ribeiro",
"Instituto Oswaldo Cruz",
"Universidade Federal do Rio de Janeiro",
"Universidade do Estado do Rio de Janeiro",
"Universidade Federal do Espírito Santo",
"Instituto Nacional da Mata Atlântica",
"Pontifícia Universidade Católica de Minas Gerais",
"Universidade Federal de Uberlândia",
"Universidade Federal do Triângulo Mineiro",
"Universidade Federal de Juiz de Fora",
"Universidade do Estado de Minas Gerais",
"Universidade Federal de Minas Gerais",
"Universidade Federal de Lavras",
"Universidade Federal de Viçosa",
"Universidade Federal de São João Del-Rei",
"Universidade Federal de Jataí",
"Empresa Brasileira de Pesquisa Agropecuária",
"Universidade de Brasília",
"Universidade Federal de Goiás",
"Universidade Estadual de Goiás",
"Universidade do Estado de Mato Grosso",
"Universidade Federal de Mato Grosso",
"Universidade Federal de Mato Grosso do Sul",
"Universidade Federal da Grande Dourados",
"Universidade Estadual de Santa Cruz",
"Universidade Federal da Bahia",
"Universidade Estadual de Feira de Santana",
"Universidade Federal do Recôncavo da Bahia",
"Universidade Estadual do Sudoeste da Bahia",
"Universidade Federal de Sergipe",
"Universidade Federal de Alagoas",
"Universidade Federal do Vale do São Francisco",
"Instituto Aggeu Magalhães — Fiocruz Pernambuco",
"Instituto Federal de Educação, Ciência E Tecnologia de Pernambuco",
"Universidade Federal de Pernambuco",
"Universidade Estadual da Paraíba",
"Universidade Federal da Paraíba",
"Universidade Federal do Rio Grande do Norte",
"Museu Paraense Emílio Goeldi",
"Universidade Federal do Pará",
"Instituto Nacional de Pesquisas da Amazônia",
"Universidade Federal do Amazonas",
"Outro",
"Masculino",
"Feminino",
"Estrangeiro",
"Brasileiro Nato",
"Sul",
"Sudeste",
"Centro-Oeste",
"Nordeste",
"Norte",
#"Membro fundador da SBBE - Categoria Graduação - Sem inscrição no SBBE24",
#"Estudante de Graduação",
#"Estudante de Graduação + Membro fundador da SBBE",
#"Membro fundador da SBBE - Categoria Pós-Graduação e Pós-doutorado - Sem inscrição no SBBE24",
#"Mestrando, Doutorando e Pós doutorando",
#"Mestrando, Doutorando e Pós doutorando + Membro fundador da SBBE",
#"Membro fundador da SBBE - Categoria Profissional - Sem inscrição no SBBE24",
#"Profissional",
#"Profissional + Membro fundador da SBBE",
"Ciências Sociais Aplicadas",
"Ciências Exatas e da Terra",
"Ciências Humanas",
"Ciências da Saúde",
"Ciências Agrárias",
"Ciências Biológicas",
"Ciência da Computação",
"Geociências",
"Educação",
"Museologia",
"Psicologia",
"Odontologia",
"Agronomia",
"Morfologia",
"Biofísica",
"Fisiologia",
"Bioinformática",
"Genética",
"Bioquímica",
"Microbiologia",
"Ecologia",
"Botânica",
"Zoologia",
"Biologia Geral",
"Prefiro não declarar",
"Não",
"Sim")
# Gets current date ~
current_date <- Sys.Date()
# Corrects  ~
fulldf$Instituição <- ifelse(str_detect(fulldf$Nome, "Fabricio Santos"), "Universidade Federal de Minas Gerais", fulldf$Instituição)
# Checks missing Institution ~
setdiff(fulldf$Instituição, variable_levels)
setdiff(fulldf$Sub_Area, variable_levels)
# Defines the event date ~
target_date <- as.Date("2024-11-20")
# Gets general numbers ~
fulldf_Descriptive <- fulldf %>%
mutate(MembersSBBE_flag = ifelse(Categoria %in% MembersSBBE, TRUE, FALSE),
AttendeesSBBE24_flag = ifelse(!Categoria %in% AttendeesSBBE24, TRUE, FALSE)) %>%
summarise("Afiliados à SBBE" = n_distinct(ID[MembersSBBE_flag]),
"Inscritos no SBBE24" = n_distinct(ID[AttendeesSBBE24_flag]),
"Instituições representadas na SBBE" = n_distinct(Instituição[MembersSBBE_flag]),
"Instituições representadas no SBBE24" = n_distinct(Instituição[AttendeesSBBE24_flag]),
"Seguidores no Instagram" = 1042,
"Seguidores no X" = 188,
"Dias até o SBBE24" = as.numeric(difftime(target_date, current_date, units = "days")),
Stats = "General") %>%
gather(key = "Variable", value = "Percentage", -Stats) %>%
mutate(n = 0) %>%
relocate(n, .before = Percentage) %>%
relocate(Stats, .after = Percentage) %>%
mutate(Variable = factor(Variable, levels = variable_levels, ordered = TRUE))
# Gets SocialMedia ~
fulldf_SocialMedia <- fulldf_Descriptive %>%
filter(Variable %in% c("Seguidores no Instagram", "Seguidores no X")) %>%
mutate(Stats = "SocialMedia") %>%
mutate(Variable = factor(Variable, levels = variable_levels, ordered = TRUE))
# Gets GeneralNumber ~
fulldf_GeneralNumbers <- fulldf_Descriptive %>%
filter(!Variable %in% c("Seguidores no Instagram", "Seguidores no X")) %>%
mutate(Stats = "GeneralNumbers") %>%
mutate(Variable = factor(Variable, levels = variable_levels, ordered = TRUE))
Matheus <- fulldf %>%
filter(str_detect(Categoria, "Graduação|Mestrando, Doutorando e Pós doutorando")) %>%
filter(!str_detect(Categoria, "Sem inscrição no CBBE")) %>%
filter(Region %in% c("Norte", "Nordeste", "Centro-Oeste"))
# Converts DateOfBirth to date ~
fulldf$DateOfBirth <- dmy(fulldf$"Data de nascimento")
# Expands fulldf by creating the Age column ~
fulldf$Age <- floor(interval(fulldf$DateOfBirth, target_date) / years(1))
# Calculates ages ~
fulldf$Age <- floor(interval(fulldf$DateOfBirth, target_date) / years(1))
# Checks whether there is anyone below 18 ~
any(fulldf$Age < 18)
# Gets percentage for Institution ~
fulldf_StageAttendeesPerc <- fulldf %>%
filter(!str_detect(Categoria, "Sem inscrição no SBBE24")) %>%
count(Stage) %>%
mutate(Percentage = n / sum(n)) %>%
rename(Variable = Stage) %>%
mutate(Stats = "StageAttendees") %>%
mutate(Variable = factor(Variable, levels = variable_levels, ordered = TRUE))
# Gets percentage for Institution ~
fulldf_StageMembersPerc <- fulldf %>%
filter(str_detect(Categoria, "Membro fundador da SBBE")) %>%
count(Stage) %>%
mutate(Percentage = n / sum(n)) %>%
rename(Variable = Stage) %>%
mutate(Stats = "StageMembers") %>%
mutate(Variable = factor(Variable, levels = variable_levels, ordered = TRUE))
# Sets all Brazilian states ~
AllBRLStates <- c("AC", "AP", "AM", "PA", "RO", "RR", "TO",
"BA", "CE", "MA", "PB", "PE", "PI", "RN", "SE", "AL",
"GO", "MT", "MS", "DF",
"ES", "MG", "RJ", "SP",
"PR", "RS", "SC", "Estrangeiro")
# Sets all Brazilian states ~
AllBRLRegions <- c("Norte", "Nordeste", "Centro-Oeste", "Sudeste", "Sul", "Estrangeiro")
# Create a data frame with counts and proportions per institution ~
fulldf_StateAttendeesPerc <- fulldf %>%
filter(!str_detect(Categoria, "Sem inscrição no SBBE24")) %>%
count(UF) %>%
mutate(Percentage = n / sum(n)) %>%
rename(Variable = UF) %>%
complete(Variable = AllBRLStates, fill = list(n = 0, Percentage = 0)) %>%
mutate(Variable = factor(Variable, levels = variable_levels, ordered = TRUE)) %>%
mutate(Stats = "StateAttendees")
# Create a data frame with counts and proportions per institution ~
fulldf_StateMembersPerc <- fulldf %>%
filter(str_detect(Categoria, "Membro fundador da SBBE")) %>%
count(UF) %>%
mutate(Percentage = n / sum(n)) %>%
rename(Variable = UF) %>%
complete(Variable = AllBRLStates, fill = list(n = 0, Percentage = 0)) %>%
mutate(Variable = factor(Variable, levels = variable_levels, ordered = TRUE)) %>%
mutate(Stats = "StateMembers")
# Create a data frame with counts and proportions per institution ~
fulldf_RegionAttendeesPerc <- fulldf %>%
filter(!str_detect(Categoria, "Sem inscrição no SBBE24")) %>%
count(Region) %>%
mutate(Percentage = n / sum(n)) %>%
rename(Variable = Region) %>%
complete(Variable = AllBRLRegions, fill = list(n = 0, Percentage = 0)) %>%
mutate(Variable = factor(Variable, levels = variable_levels, ordered = TRUE)) %>%
mutate(Stats = "RegionAttendees")
# Create a data frame with counts and proportions per institution ~
fulldf_RegionMembersPerc <- fulldf %>%
filter(str_detect(Categoria, "Membro fundador da SBBE")) %>%
count(Region) %>%
mutate(Percentage = n / sum(n)) %>%
rename(Variable = Region) %>%
complete(Variable = AllBRLRegions, fill = list(n = 0, Percentage = 0)) %>%
mutate(Variable = factor(Variable, levels = variable_levels, ordered = TRUE)) %>%
mutate(Stats = "RegionMembers")
# Gets percentage for Gender ~
fulldf_GenderAttendeesPerc <- fulldf %>%
filter(!str_detect(Categoria, "Sem inscrição no SBBE24")) %>%
count(Gênero) %>%
mutate(Percentage = n / sum(n)) %>%
rename(Variable = Gênero) %>%
mutate(Variable = factor(Variable, levels = variable_levels, ordered = TRUE)) %>%
mutate(Stats = "GenderAttendees")
# Gets percentage for Gender ~
fulldf_GenderMembersPerc <- fulldf %>%
filter(str_detect(Categoria, "Membro fundador da SBBE")) %>%
count(Gênero) %>%
mutate(Percentage = n / sum(n)) %>%
rename(Variable = Gênero) %>%
mutate(Variable = factor(Variable, levels = variable_levels, ordered = TRUE)) %>%
mutate(Stats = "GenderMembers")
# Gets percentage for Institution ~
fulldf_InstitutionMembersPerc <- fulldf %>%
filter(str_detect(Categoria, "Membro fundador da SBBE")) %>%
count(Instituição) %>%
mutate(Percentage = n / sum(n)) %>%
rename(Variable = Instituição) %>%
mutate(Stats = "InstitutionMembers") %>%
mutate(Variable = factor(Variable, levels = variable_levels, ordered = TRUE))
# Gets percentage for Institution ~
fulldf_InstitutionAttendeesPerc <- fulldf %>%
filter(!str_detect(Categoria, "Sem inscrição no SBBE24")) %>%
count(Instituição) %>%
mutate(Percentage = n / sum(n)) %>%
rename(Variable = Instituição) %>%
mutate(Stats = "InstitutionAttendees") %>%
mutate(Variable = factor(Variable, levels = variable_levels, ordered = TRUE))
# Create a data frame with counts and proportions per institution ~
fulldf_AreaMembersPerc <- fulldf %>%
filter(str_detect(Categoria, "Membro fundador da SBBE")) %>%
count(Área) %>%
mutate(Percentage = n / sum(n)) %>%
rename(Variable = Área) %>%
mutate(Variable = factor(Variable, levels = variable_levels, ordered = TRUE)) %>%
mutate(Stats = "AreaMembers")
# Create a data frame with counts and proportions per institution ~
fulldf_AreaAttendeesPerc <- fulldf %>%
filter(!str_detect(Categoria, "Sem inscrição no SBBE24")) %>%
count(Área) %>%
mutate(Percentage = n / sum(n)) %>%
rename(Variable = Área) %>%
mutate(Variable = factor(Variable, levels = variable_levels, ordered = TRUE)) %>%
mutate(Stats = "AreaAttendees")
# Create a data frame with counts and proportions per institution ~
fulldf_SubAreaMembersPerc <- fulldf %>%
filter(str_detect(Categoria, "Membro fundador da SBBE")) %>%
count(Sub_Area) %>%
mutate(Percentage = n / sum(n)) %>%
rename(Variable = Sub_Area) %>%
mutate(Variable = factor(Variable, levels = variable_levels, ordered = TRUE)) %>%
mutate(Stats = "SubAreaMembers")
# Create a data frame with counts and proportions per institution ~
fulldf_SubAreaAttendeesPerc <- fulldf %>%
filter(!str_detect(Categoria, "Sem inscrição no SBBE24")) %>%
count(Sub_Area) %>%
mutate(Percentage = n / sum(n)) %>%
rename(Variable = Sub_Area) %>%
mutate(Variable = factor(Variable, levels = variable_levels, ordered = TRUE)) %>%
mutate(Stats = "SubAreaAttendees")
# Create a data frame with counts and proportions per institution ~
fulldf_CategoryPerc <- fulldf %>%
filter(!str_detect(Categoria, "Sem inscrição no SBBE24")) %>%
count(Categoria) %>%
mutate(Percentage = n / sum(n)) %>%
rename(Variable = Categoria) %>%
mutate(Variable = factor(Variable, levels = variable_levels, ordered = TRUE)) %>%
mutate(Stats = "Category")
# Gets percentage for Gender Support ~
fulldf_descontos_GenderPerc <- fulldf_descontos %>%
count(Gênero) %>%
mutate(Percentage = n / sum(n)) %>%
rename(Variable = Gênero) %>%
mutate(Variable = factor(Variable, levels = variable_levels, ordered = TRUE)) %>%
mutate(Stats = "GenderSupport")
# Gets percentage for Ethnicity
fulldf_descontos_EthnicityPerc <- fulldf_descontos %>%
count(Etnicidade) %>%
mutate(Percentage = n / sum(n)) %>%
rename(Variable = Etnicidade) %>%
mutate(Variable = factor(Variable, levels = variable_levels, ordered = TRUE)) %>%
mutate(Stats = "Ethnicity")
# Gets percentage for Ethnicity
fulldf_descontos_DiversityPerc <- fulldf_descontos %>%
count(.[[5]]) %>%
mutate(Percentage = n / sum(n)) %>%
rename(Variable = ".[[5]]") %>%
mutate(Variable = factor(Variable, levels = variable_levels, ordered = TRUE)) %>%
mutate(Stats = "Diversity")
# Gets percentage for Ethnicity
fulldf_descontos_PCDPerc <- fulldf_descontos %>%
count(PCD) %>%
mutate(Percentage = n / sum(n)) %>%
rename(Variable = PCD) %>%
mutate(Variable = factor(Variable, levels = variable_levels, ordered = TRUE)) %>%
mutate(Stats = "PCD")
# Gets percentage for Ethnicity
fulldf_descontos_NationalityPerc <- fulldf_descontos %>%
count(.[[9]]) %>%
mutate(Percentage = n / sum(n)) %>%
rename(Variable = ".[[9]]") %>%
mutate(Variable = factor(Variable, levels = variable_levels, ordered = TRUE)) %>%
mutate(Stats = "Nationality")
# Gets percentage for Ethnicity
fulldf_descontos_RegionSupportPerc <- fulldf_descontos %>%
count(.[[10]]) %>%
mutate(Percentage = n / sum(n)) %>%
rename(Variable = ".[[10]]") %>%
mutate(Variable = factor(Variable, levels = variable_levels, ordered = TRUE)) %>%
mutate(Stats = "RegionSupport")
# Gets SBBE Founders ~
SBBEFounders <- fulldf %>%
filter(str_detect(Categoria, "Membro fundador da SBBE")) %>%
select(Nome, "E-mail")
write_xlsx(SBBEFounders, "./Lists/SBBEMembers.xlsx")
# Gets SBBE24 Attendees ~
SBBE24Attendees <- fulldf %>%
filter(!str_detect(Categoria, "Sem inscrição no SBBE24")) %>%
select(Nome, "E-mail")
write_xlsx(SBBE24Attendees, "./Lists/SBBE24Attendees.xlsx")
# Combine the data frames ~
fulldfUp <- bind_rows(fulldf_GeneralNumbers,
fulldf_SocialMedia,
fulldf_StageMembersPerc,
fulldf_StageAttendeesPerc,
#fulldf_RegionMembersPerc,
#fulldf_RegionAttendeesPerc,
fulldf_GenderMembersPerc,
fulldf_GenderAttendeesPerc,
fulldf_InstitutionMembersPerc,
fulldf_InstitutionAttendeesPerc)
#fulldf_AreaMembersPerc,
#fulldf_AreaAttendeesPerc,
#fulldf_SubAreaMembersPerc,
#fulldf_SubAreaAttendeesPerc)
#fulldf_CategoryPerc,
#fulldf_descontos_EthnicityPerc,
#fulldf_descontos_GenderPerc,
#fulldf_descontos_DiversityPerc,
#fulldf_descontos_PCDPerc,
#fulldf_descontos_NationalityPerc,
#fulldf_descontos_RegionSupportPerc)
# Expands fulldfUp by creating BarFill ~
fulldfUp$BarFill <- ifelse(str_detect(fulldfUp$Stats, "Members"), "#006837",
ifelse(str_detect(fulldfUp$Stats, "Attendees"), "#41ab5d", "#fbb4ae"))
# Reorders Population ~
fulldfUp$Stats <- factor(fulldfUp$Stats, ordered = T,
levels = c("GeneralNumbers",
"SocialMedia",
"StageMembers",
"StageAttendees",
"RegionMembers",
"RegionAttendees",
"GenderMembers",
"GenderAttendees",
"InstitutionMembers",
"InstitutionAttendees",
"AreaMembers",
"AreaAttendees",
"SubAreaMembers",
"SubAreaAttendees",
"GenderSupport",
"Ethnicity",
"Diversity",
"PCD",
"Nationality",
"RegionSupport"))
# Sets custom x-axis labels ~
ylabel <- c("GeneralNumbers" = "Números Gerais",
"SocialMedia" = "Mídias Sociais",
"StageMembers" = "Percentagem de Afiliados por Estágio Acadêmico",
"StageAttendees" = "Percentagem de Inscritos por Estágio Acadêmico",
"RegionMembers" = "Percentagem de Afiliados por Região de Atuação",
"RegionAttendees" = "Percentagem de Inscritos por Região de Atuação",
"GenderMembers" = "Percentagem de Afiliados por Gênero",
"GenderAttendees" = "Percentagem de Inscritos por Gênero",
"InstitutionMembers" = "Percentagem de Afiliados por Instituição",
"InstitutionAttendees" = "Percentagem de Inscritos por Instituição",
"AreaMembers" = "Percentagem de Afiliados por Área",
"AreaAttendees" = "Percentagem de Inscritos por Área",
"SubAreaMembers" = "Percentagem de Afiliados por Sub-Área",
"SubAreaAttendees" = "Percentagem de Inscritos por Sub-Área",
#"Category" = "Percentagem de Inscritos e/ou Membros por Categoria",
"GenderSupport" = "Percentagem de Solicitantes de Apoio por Gênero",
"Ethnicity"= "Percentagem de Solicitantes de Apoio por Etnicidade",
"Diversity" = "Percentagem de Solicitantes da Comunidade LGBTQIAP+",
"PCD" = "Percentagem de Solicitantes com Deficiência",
"Nationality" = "Percentagem de Solicitantes Brasileiros",
"RegionSupport" = "Percentagem de Solicitantes por Região de Atuação")
# Custom y-axis breaks ~
breaks_fun <- function(y){
caseVal <- max(y)
if (caseVal < 1){
seq(.1, .9, by = .1)}
else if (caseVal > 1000){
seq(50, 1000, by = 100)}
else {
seq(50, 650, by = 50)}}
# Custom y-axis labels ~
plot_index_labels <- 0
labels_fun <- function(z) {
plot_index_labels <<- plot_index_labels + 1L
switch(plot_index_labels,
scales::label_number(accuracy = 1)(z),
scales::label_number(accuracy = 1)(z),
#scales::label_percent(accuracy = 1, scale = 1 * 100, big.mark = "")(z),
#scales::label_percent(accuracy = 1, scale = 1 * 100, big.mark = "")(z),
#scales::label_percent(accuracy = 1, scale = 1 * 100, big.mark = "")(z),
#scales::label_percent(accuracy = 1, scale = 1 * 100, big.mark = "")(z),
#scales::label_percent(accuracy = 1, scale = 1 * 100, big.mark = "")(z),
#scales::label_percent(accuracy = 1, scale = 1 * 100, big.mark = "")(z),
scales::label_percent(accuracy = 1, scale = 1 * 100, big.mark = "")(z),
scales::label_percent(accuracy = 1, scale = 1 * 100, big.mark = "")(z),
scales::label_percent(accuracy = 1, scale = 1 * 100, big.mark = "")(z),
scales::label_percent(accuracy = 1, scale = 1 * 100, big.mark = "")(z),
scales::label_percent(accuracy = 1, scale = 1 * 100, big.mark = "")(z),
scales::label_percent(accuracy = 1, scale = 1 * 100, big.mark = "")(z))}
# Custom y-axis limits ~
limits_fun <- function(x){
limitVal <- max(x)
if (limitVal > 1000){
c(0, 1050)}
else if (limitVal > 600){
c(0, 640)}
else if (limitVal < .2){
c(0, .22)}
else if (limitVal < .3){
c(0, .32)}
else if (limitVal < .4){
c(0, .42)}
else if (limitVal < .5){
c(0, .52)}
else if (limitVal < .6){
c(0, .62)}
else {
c(0, .9975)}}
# Gets current date ~
current_date <- format(Sys.Date())
# Formats date ~
current_date_PT <- paste0(day(current_date), " de ",
month(current_date, label = TRUE, abbr = FALSE, locale = "pt_BR"), " de ",
year(current_date))
# Gets panel ~
Panel <-
ggplot() +
geom_bar(data = fulldfUp, aes(x = as.factor(Variable), y = Percentage, fill = BarFill),
colour = "#000000", linewidth = .3, stat = "identity", position = "dodge") +
geom_text(data = subset(fulldfUp, Stats == "GeneralNumbers" | Stats == "SocialMedia"), aes(x = as.factor(Variable), y = Percentage,
label = ifelse(Percentage > 1000, sprintf("%.3f", Percentage / 1000), Percentage)),
position = position_dodge(width = .9), family = "cormorant", size = 5.5, fontface = "bold", hjust = 1.75) +
labs(title = "Sociedade Brasileira de Biologia Evolutiva (SBBE)",
subtitle = "I Congresso Brasileiro de Biologia Evolutiva (SBBE24)",
caption = paste0("Data: ", current_date_PT, ".")) +
scale_fill_identity() +
facet_wrap(Stats ~ ., scales = "free", ncol = 2, labeller = labeller(Stats = ylabel)) +
scale_y_continuous("Percentagem",
breaks = breaks_fun,
labels = labels_fun,
limits = limits_fun,
expand = c(0, 0)) +
theme(panel.background = element_rect(fill = "#ffffff"),
panel.grid.major.x = element_line(color = "#d9d9d9", linetype = "dashed", linewidth = .05),
panel.grid.major.y = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
panel.spacing.y = unit(1, "cm"),
plot.title = element_text(family = "cormorant", size = 42, colour = "#006837", face = "bold", hjust = .5, margin = margin(t = 50, r = 0, b = 15, l = 0)),
plot.subtitle = element_text(family = "cormorant", size = 42, colour = "#41ab5d", face = "bold", hjust = .5, margin = margin(t = 0, r = 0, b = 75, l = 0)),
plot.caption = element_text(family = "cormorant", size = 20, face = "bold", hjust = -.175, margin = margin(t = 20, r = 0, b = 10, l = 0)),
axis.title = element_blank(),
axis.text.x = element_text(family = "cormorant", color = "#000000", size = 13, face = "bold"),
axis.text.y = element_text(family = "cormorant", color = "#000000", size = 13, face = "bold"),
axis.ticks = element_line(colour = "#000000", linewidth = .5),
strip.text = element_text(colour = "#000000", size = 20, face = "bold", family = "cormorant"),
strip.background = element_rect(colour = "#000000", fill = "#d6d6d6", linewidth = .3),
axis.line = element_line(colour = "#000000", linewidth = .3),
legend.position = "none") +
coord_flip()
# Adds SBBElogo ~
PanelUp <- ggdraw(Panel) +
draw_image(SBBElogo, scale = .05, x = .04, y = .97, hjust = .5, vjust = .5) +
draw_image(SBBE24logo, scale = .07, x = .115, y = .97, hjust = .5, vjust = .5)
# Saves panel ~
ggsave(PanelUp, file = "SBBE_SBBE24--DescriptivePanel.pdf", limitsize = FALSE,
device = cairo_pdf, scale = 1, width = 32, height = 62, dpi = 600)
